# ~from lxml import etree

# ~def invert_colors(input_file, output_file):
    # ~tree = etree.parse(input_file)

    # ~# Itera attraverso tutti gli elementi 'path'
    # ~for path_element in tree.xpath('//svg:path', namespaces={'svg': 'http://www.w3.org/2000/svg'}):
        # ~# Inverte i colori
        # ~fill_attribute = path_element.get('{http://www.inkscape.org/namespaces/inkscape}fill')
        # ~if fill_attribute:
            # ~path_element.set('{http://www.inkscape.org/namespaces/inkscape}fill', 'invert')

    # ~# Salva le modifiche nel nuovo file
    # ~tree.write(output_file, pretty_print=True)

# ~# Esempio di utilizzo
# ~input_file = 'azzera.svg'
# ~output_file = 'azzera_.svg'
# ~invert_colors(input_file, output_file)

# ~import xml.etree.ElementTree as ET

# ~def invert_color(color):
    # ~# Assuming color is in the form of '#RRGGBB'
    # ~r, g, b = int(color[1:3], 16), int(color[3:5], 16), int(color[5:7], 16)
    # ~inverted_color = f'#{255-r:02X}{255-g:02X}{255-b:02X}'
    # ~return inverted_color

# ~def invert_colors(input_file, output_file):
    # ~tree = ET.parse(input_file)
    # ~root = tree.getroot()

    # ~# Define namespaces
    # ~svg_namespace = 'http://www.w3.org/2000/svg'
    # ~inkscape_namespace = 'http://www.inkscape.org/namespaces/inkscape'

    # ~# Iterate through all the 'path' elements
    # ~for path_element in root.findall('.//{'+svg_namespace+'}path'):
        # ~# Invert the colors
        # ~fill_attribute = path_element.get('{' + inkscape_namespace + '}fill')
        # ~if fill_attribute:
            # ~inverted_fill = invert_color(fill_attribute)
            # ~path_element.set('{' + inkscape_namespace + '}fill', inverted_fill)

    # ~# Save the modifications to the new file
    # ~tree.write(output_file, xml_declaration=True, method='xml', encoding='utf-8')

# ~# Example of usage
# ~input_file = 'azzera.svg'
# ~output_file = 'azzera_inverted.svg'
# ~invert_colors(input_file, output_file)
from lxml import etree
import os

def invert_color(color):
    # Assuming color is in the form of '#RRGGBB'
    r, g, b = int(color[1:3], 16), int(color[3:5], 16), int(color[5:7], 16)

    # Check if the color is black or white
    if (r, g, b) == (0, 0, 0):
        inverted_color = '#ffffff'  # Invert black to white
    elif (r, g, b) == (255, 255, 255):
        inverted_color = '#000000'  # Invert white to black
    # ~else:
        # ~inverted_color = f'#{255-r:02X}{255-g:02X}{255-b:02X}'

    return inverted_color

def invert_colors(input_file, output_file):
    parser = etree.XMLParser(recover=True)

    tree = etree.parse(input_file, parser)
    root = tree.getroot()

    # Get the namespace mapping
    nsmap = root.nsmap

    # Define the SVG namespace
    svg_namespace = nsmap.get(None, '')

    # Iterate through all the 'path' elements in the SVG namespace
    for path_element in root.findall('.//{%s}path' % svg_namespace):
        # Invert the colors
        fill_attribute = path_element.get('fill')
        if fill_attribute:
            inverted_fill = invert_color(fill_attribute)
            path_element.set('fill', inverted_fill)
        fill_attribute = path_element.get('stroke')
        if fill_attribute:
            inverted_fill = invert_color(fill_attribute)
            path_element.set('stroke', inverted_fill)

    # Save the modifications to the new file
    tree.write(output_file, pretty_print=True, xml_declaration=True, encoding='utf-8')

def process_all_svgs(input_folder, output_folder):
    # Use os.getcwd() to get the current working directory
    current_directory = os.getcwd()

    # Combine the current directory with the provided input and output folders
    input_folder = os.path.join(current_directory, input_folder)
    output_folder = os.path.join(current_directory, output_folder)

    # Create the output folder if it doesn't exist
    os.makedirs(output_folder, exist_ok=True)

    # Iterate through all files in the input folder
    for filename in os.listdir(input_folder):
        if filename.endswith(".svg"):
            input_file = os.path.join(input_folder, filename)
            output_file = os.path.join(output_folder, filename.replace(".svg", ".svg"))
            invert_colors(input_file, output_file)

# Example of usage
input_folder = ''
output_folder = 'output_folder'
process_all_svgs(input_folder, output_folder)










